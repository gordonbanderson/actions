name: ci-silverstripe-module
on:
  workflow_call:
    inputs:
      php-version:
        type: string
        required: false
        default: 7.4

      # At time of commit, 4.7 to 4.9 are the supported versions
      silverstripe-version:
        type: string
        required: false
        default: 4.9

      # Optional list of packages to install
      debian-packages:
        type: string
        required: false
        default: ''

      # Composer flags
      validate-composer-file:
        type: boolean
        default: false
        required: false

      # Only MySQL (mysql) and PostgreSQL (postgresql) supported currently
      database:
        type: string
        required: false
        default: mysql

      # Iff this is set, the SQL commands will be executed against the database.  Useful for adding postgis extension
      database-script:
        type: string
        default: ''
        required: false

      # Currently manitcoresearch is the only engine supported
      search-engine:
        type: string
        default: none
        required: false

      # Unit testing flags
      run-php-unit:
        type: boolean
        required: false
        default: true
      run-php-unit-coverage:
        type: boolean
        required: false
        default: false

      # Linting flags
      run-php-lint:
        type: boolean
        required: false
        default: false
      run-phpstan:
        type: boolean
        required: false
        default: false
      run-todo:
        type: boolean
        required: false
        default: false
      run-duplicate-code-check:
        type: boolean
        required: false
        default: false

      # SilverStripe requires an environment flag set in order to enable test only config, but unfortunately env vars
      # are not passed through when uses directive is used.  As such it will have to be passed in each time :(
      test-config-flag:
        type: string
        required: false
        default: THIS_IS_A_DUMMY_FLAG

jobs:
  ssmoduletests:
    runs-on: ubuntu-latest
    strategy:
      # Ensure all jobs run
      fail-fast: false

    steps:
    - name: Install Debian Packages
      if: ${{ inputs.debian-packages != '' }}
      run: sudo apt -yqq install ${{ inputs.debian-packages }}

    - name: Shutdown native MySQL
      run: sudo service mysql stop # Shutdown the Default MySQL, "sudo" is necessary, please not remove it

    - name: Start containerized MySQL
      if: ${{ inputs.database == 'mysql' }}
      uses: mirromutth/mysql-action@v1.1
      with:
        container port: 3306 # Optional, default value is 3306. The port of container
        mysql version: '5.7' # Optional, default value is "latest". The version of the MySQL
        mysql database: 'SS_mysite' # Optional, default value is "test". The specified database which will be create
        mysql root password: root

    - name: Start containerized MariaDB
      if: ${{ inputs.database == 'mariadb' }}
      uses: getong/mariadb-action@v1.1
      with:
        container port: 3306 # Optional, default value is 3306. The port of container
        mysql version: '5.7' # Optional, default value is "latest". The version of the MySQL
        mysql database: 'SS_mysite' # Optional, default value is "test". The specified database which will be create
        mysql root password: root

    - name: Run PostgreSQL
      if: ${{ inputs.database == 'postgresql' }}
      uses: huaxk/postgis-action@v1
      # Copy MySQL credentials as above
      with:
        postgresql version: 'latest'
        postgresql db: 'SS_mysite'
        postgresql user: 'root'
        postgresql password: 'root'


    - name: Run Manticoresearch
      if: ${{ inputs.search-engine == 'manticoresearch' }}
      uses: gordonbanderson/manticoresearch-action@main

    - name: Run Database scripts for PostgreSQL
      if: ${{ inputs.database-script != '' }}
      run: |
        netstat -tln
        sleep 10 # @todo Ensure server is started before running command, connection fails without some pause
        PGPASSWORD=root psql -U root --host=localhost -d SS_mysite -c "${{ inputs.database-script }}"

    - name: Alter env for test yml configuration in SS unit testing - optional
      run: |
        echo "${{ inputs.test-config-flag }}=1" >> $GITHUB_ENV

    - name: Checkout code
      uses: actions/checkout@v2

    - name: Check node file existence
      id: check_node_files
      uses: andstor/file-existence-action@v1
      with:
        files: "package.json, package-lock.json"

    # Not sure why this is required, but it fixes a missing cache dir issue
    - name: Ensure npm cache dir exists
      if: steps.check_node_files.outputs.files_exists == 'true'
      run: mkdir /home/runner/.npm

    - uses: actions/setup-node@v2
      if: steps.check_node_files.outputs.files_exists == 'true'
      with:
        node-version: '16'
        cache: 'npm'

    - name: Install node packages
      if: steps.check_node_files.outputs.files_exists == 'true'
      run: npm install

    - name: Setup PHP ${{ inputs.php-version }} with PECL extension
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ inputs.php-version }}
        extensions: curl, dom, gd, imagick, intl, json, ldap, mbstring, mysql, tidy, zip

    - name: Validate composer.json and composer.lock
      if: ${{inputs.validate-composer-file == true}}
      run: composer validate --strict

    - name: Cache Composer packages
      id: composer-cache
      uses: actions/cache@v2
      with:
        path: vendor
        key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}
        restore-keys: |
          ${{ runner.os }}-php-

    - name: Install certain version of SilverStripe
      run: composer require --no-update silverstripe/recipe-cms:${{ inputs.silverstripe-version }}

    - name: Optionally installed PostgreSQL package
      if: ${{ inputs.database == 'postgresql' }}
      run: composer require --no-update silverstripe/postgresql

    - name: Install dependencies
      # TODO Figure out why recipe removal and reinstall step has become necessary
      run: |
        composer install --prefer-dist --verbose --profile
        rm -rf vendor/silverstripe/recipe*
        composer install --prefer-dist --verbose --profile
        composer info

    # This is configured to run against the service database
    - name: Set up .env file for database
      run: wget "https://raw.githubusercontent.com/silverstripe/github-actions-ci-cd/main/.github/things/.env"

      #PostgreSQLDatabase
    - name: Configure for PostgreSQL as opposed to MySQL
      if: ${{ inputs.database == 'postgresql' }}
      run: |
        cat .env | sed s/MySQLDatabase/PostgreSQLDatabase/ > /tmp/ssenv
        mv /tmp/ssenv .env

    # Set the database collation explicitly
    - name: Set database collation
      run: wget -O _config/collation.yml https://gist.githubusercontent.com/gordonbanderson/4305a3330d22761c78f33b8bf8ea5606/raw/4b229f639b2b4312ebe6526e82db42d1be21fc75/collation.yml

      # This is not always required, but safter to run it, running into issues with session manager module
    - name: Run SS dev/build
      run: vendor/bin/sake dev/build flush=all

    - name: Run Unit Tests
      if: ${{ inputs.run-php-unit }}
      run: |
        vendor/bin/phpunit tests '' flush=1

    - name: Lint Check
      if: ${{ inputs.run-php-lint }}
      run: vendor/bin/parallel-lint src/ tests/

    - name: PHP Unit Coverage
      if: ${{ inputs.run-php-unit-coverage }}
      run: |
        phpdbg -qrr vendor/bin/phpunit tests --coverage-clover=coverage.xml
        bash <(curl -s https://codecov.io/bash) -f coverage.xml

    - name: PHPStan
      if: ${{ inputs.run-phpstan }}
      run: |
        vendor/bin/phpstan analyse --level=8 -c tests/phpstan.neon src/

    - name: TODO
      if: ${{ inputs.run-todo }}
      run: |
        node_modules/leasot/bin/leasot -x tests --ignore **/*.neon

    - name: Duplication
      if: ${{ inputs.run-duplicade-code-check }}
      run: |
        node_modules/jscpd/bin/jscpd src
        node_modules/jscpd/bin/jscpd tests
